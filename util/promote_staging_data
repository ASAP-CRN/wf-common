#!/usr/bin/env python3

import argparse
import sys
import logging
from datetime import datetime
from google.cloud import storage
from common import (
	list_teams,
	list_gs_files,
	gsync,
)

ALL_TEAMS = [
	"cohort",
	"team-hafler",
	"team-hardy",
	"team-jakobsson",
	"team-lee",
	"team-scherzer",
	"team-sulzer",
	"team-voet",
	"team-wood"
]

GREEN_CHECKMARK = "✅"
RED_X = "❌"

logging.basicConfig(
	level=logging.INFO,
	format="%(asctime)s - %(levelname)s - %(message)s",
	handlers=[
		logging.FileHandler("promote_staging_data_script.log"),
		logging.StreamHandler()
	]
)

def main(args):
	if args.list:
		list_teams()
		sys.exit(0)

	for team in args.teams:
		if team not in ALL_TEAMS:
			logging.error(f"Team [{team}] is not one of the available teams")
			list_teams()
			sys.exit(1)

	client = storage.Client()

	# TODO - add data integrity tests

	dry_run = not args.promote
	for team, dataset in zip(args.teams, args.dataset):
		staging_bucket = f"gs://asap-{args.staging}-{team}-{args.source}-{dataset}"
		production_bucket = f"gs://asap-curated-{team}-{args.source}-{dataset}"

		logging.info(f"Promoting [{team}] data to production")
		logging.info(f"\tStaging bucket:\t\t[{staging_bucket}]")
		logging.info(f"\tProduction bucket:\t[{production_bucket}]")

		gsync(staging_bucket, production_bucket, dry_run)


if __name__ == "__main__":
	parser = argparse.ArgumentParser(
		description="Promote data in staging buckets to production."
	)

	parser.add_argument(
		"-t",
		"--teams",
		type=str,
		nargs='+',
		required=True,
		help="Space-delimited team(s) to promote data for."
	)
	parser.add_argument(
		"-l",
		"--list",
		action="store_true",
		required=False,
		help="List available teams."
	)
	parser.add_argument(
		"-s",
		"--source",
		type=str,
		required=True,
		help="Source name in bucket name."
	)
	parser.add_argument(
		"-d",
		"--dataset",
		type=str,
		nargs='+',
		required=True,
		help="Space-delimited dataset name(s) in team bucket name, must follow the same order as {team}."
	)
	parser.add_argument(
		"-w",
		"--workflow-name",
		type=str,
		required=True,
		help="Workflow name used as a directory in bucket."
	)
	parser.add_argument(
		"-p",
		"--promote",
		action="store_true",
		required=False,
		help="Promote data (default is dry run)."
	)
	parser.add_argument(
		"-s",
		"--staging",
		choices=["uat", "dev"],
		default="uat",
		required=False,
		help="Staging bucket type (uat or dev) [uat]."
	)

	args = parser.parse_args()

	if len(args.team) != len(args.dataset):
        parser.error("The number of teams and datasets must be the same.")

	main(args)

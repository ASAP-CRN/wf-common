#!/usr/bin/env python3

import argparse
import subprocess
import sys
from datetime import datetime

ALL_TEAMS = [
	"cohort",
	"team-hafler",
	"team-hardy",
	"team-jakobsson", 
	"team-lee",
	"team-scherzer",
	"team-sulzer",
	"team-voet",
	"team-wood"
]

def list_teams():
	print("Available teams:")
	for team in ALL_TEAMS:
			print(team)

def gsync(source_path, destination_path, dry_run):
	dry_run_arg = "-n" if dry_run else ""
	command = [
		"gsutil",
		"-m",
		"rsync",
		"-d",
		"-r",
		dry_run_arg,
		source_path,
		destination_path
	]
	subprocess.run(command, check=True)

def main(args):
	if args.list:
		list_teams()
		sys.exit(0)

	teams = ALL_TEAMS if args.all else args.teams
	for team in teams:
		if team not in ALL_TEAMS:
			print(f"Team [{team}] is not one of the available teams")
			list_teams()
			sys.exit(1)

	dry_run = not args.promote
	for team in teams:
		staging_bucket = f"gs://asap-{args.staging}-data-{team}"
		production_bucket = f"gs://asap-curated-data-{team}"

		print(f"Promoting [{team}] data to production")
		print(f"\tStaging bucket:\t\t[{staging_bucket}]")
		print(f"\tProduction bucket:\t[{production_bucket}]")

		gsync(staging_bucket, production_bucket, dry_run)


if __name__ == "__main__":
	parser = argparse.ArgumentParser(
		description="Promote data in staging buckets to production."
	)

	parser.add_argument(
		"-t",
		"--teams",
		type=str,
	  nargs='+',
		required=True,
		help="Space-separated set of teams to promote data for."
	)
	parser.add_argument(
		"-a",
		"--all",
		action="store_true",
		required=False,
		help="Promote all teams' data."
	)
	parser.add_argument(
		"-l",
		"--list",
		action="store_true",
		required=False,
		help="List available teams."
	)
	parser.add_argument(
		"-p",
		"--promote",
		action="store_true",
		required=False,
		help="Promote data (default is dry run)."
	)
	parser.add_argument(
		"-s",
		"--staging",
		choices=["uat", "dev"],
		default="uat",
		required=False,
		help="Staging bucket type (uat or dev) [uat]."
	)

	args = parser.parse_args()
	main(args)
